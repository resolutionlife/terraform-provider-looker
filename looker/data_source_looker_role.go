package looker

import (
	"context"
	"strings"

	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/resolutionlife/terraform-provider-looker/internal/conv"

	sdk "github.com/looker-open-source/sdk-codegen/go/sdk/v4"
)

func datasourceRole() *schema.Resource {
	return &schema.Resource{
		ReadContext: datasourceRoleRead,
		Importer: &schema.ResourceImporter{
			StateContext: schema.ImportStatePassthroughContext,
		},

		Schema: map[string]*schema.Schema{
			"name": {
				Type:        schema.TypeString,
				Required:    true,
				Description: "The name of the role. This field is not case sensitive. See the documentation on looker [roles](https://docs.looker.com/admin-options/settings/roles) and [default roles](https://docs.looker.com/admin-options/settings/roles#default_roles) generated by Looker.",
			},
			"id": {
				Type:        schema.TypeInt,
				Computed:    true,
				Description: "The id of the resource",
			},
		},
	}
}

func datasourceRoleRead(ctx context.Context, d *schema.ResourceData, c interface{}) diag.Diagnostics {
	api := c.(*sdk.LookerSDK)

	roles, rolesErr := api.AllRoles(sdk.RequestAllRoles{
		Fields: conv.PString("id, name"),
	}, nil)
	if rolesErr != nil {
		return diag.FromErr(rolesErr)
	}

	roleName := d.Get("name").(string)
	for _, role := range roles {
		if role.Name != nil && strings.EqualFold(*role.Name, roleName) {
			if role.Id == nil {
				return diag.Errorf("role %s has nil id", roleName)
			}
			d.SetId(*role.Id)
			return nil
		}
	}

	return diag.Errorf("no role found with the name %s", roleName)
}
